{"searchDocs":[{"title":"Controlling the Robot","type":0,"sectionRef":"#","url":"/docs/Control-Robot/intro","content":"","keywords":"","version":"Next"},{"title":"Introduction​","type":1,"pageTitle":"Controlling the Robot","url":"/docs/Control-Robot/intro#introduction","content":" We will implement the ROS2_control library in these modules. ","version":"Next","tagName":"h2"},{"title":"What is the URDF?","type":0,"sectionRef":"#","url":"/docs/Define-Robot/what-is-URDF","content":"What is the URDF? This module covers what a URDF (Uniform Robotics Description Format) is and why it is important in the context of robotic development and ROS2. URDF (Unified Robot Description Format) is a file format for specifying the geometry and organization of robots in ROS. URDF's are made up of 2 basic elements Links and Joints. Links are the elements that define the shape and size of the robot. They are the building blocks of the robot and are connected by joints. Joints are the elements that connect two links in a robot. They define the relative motion between the links. Josh Newman explains defining a URDF in ROS2. The nice thing about URDF creator is that the URDF can be made visually as it gets updated instead of manually writing out the URDF. Citations: D. Tola and P. Corke, &quot;Understanding URDF: A Dataset and Analysis,&quot; in IEEE Robotics and Automation Letters, vol. 9, no. 5, pp. 4479-4486, May 2024, doi: 10.1109/LRA.2024.3381482","keywords":"","version":"Next"},{"title":"Links","type":0,"sectionRef":"#","url":"/docs/Define-Robot/links","content":"Links Links are the elements that define the shape and size of the robot. They are the building blocks of the robot and are connected by joints.","keywords":"","version":"Next"},{"title":"URDF Code","type":0,"sectionRef":"#","url":"/docs/Define-Robot/URDF-code","content":"URDF Code","keywords":"","version":"Next"},{"title":"Understanding Transformations","type":0,"sectionRef":"#","url":"/docs/Understand-Robot/Transformations-TF2","content":"","keywords":"","version":"Next"},{"title":"Introduction​","type":1,"pageTitle":"Understanding Transformations","url":"/docs/Understand-Robot/Transformations-TF2#introduction","content":" Transformations are a key concept in robotics. They are used to describe the position and orientation of objects in a 3D space. In ROS2, transformations are managed by the tf2 library. This library provides a way to represent and manipulate transformations in a way that is easy to work with. ","version":"Next","tagName":"h2"},{"title":"Building a Robot","type":0,"sectionRef":"#","url":"/docs/Understand-Robot/building-a-robot","content":"","keywords":"","version":"Next"},{"title":"Introduction​","type":1,"pageTitle":"Building a Robot","url":"/docs/Understand-Robot/building-a-robot#introduction","content":" In these tutorials we focus on a concurrent processing robot meaning a robot that can be processing multiple things at a single moment (sensor, planning, mapping, etc..).  caution If you are an absolute beginner looking to build your own robot, start by building and programming and programming one of the following robots: These robots can be simple and very rewarding to start a good foundation of robotics. Robot InventorElegoo Uno R3MbotThymioVEX IQ  If you are experienced with a background of these robots these tutorials are built to learn the next phase of robotics being ROS2, a open source robotics framework for developing concurrent processing robots in a customizable way.  These tutorials will teach foundational topics in robotics in a easy to understand way. ","version":"Next","tagName":"h2"},{"title":"Congratulations!","type":0,"sectionRef":"#","url":"/docs/Define-Robot/congratulations","content":"Congratulations! You have learned the basics of URDF creation and how to use the URDF Creator application to design a robot in ROS2. As a review in this section you learned: Why URDF is important in the context of robotic development and ROS2.What is the URDF and its basic elements.What are all the parameters that can be set for linksWhat are all the parameters that can be set for jointsUnderstanding the code of a URDF fileHow to deploy a URDF file to a ROS2 package Next we will go into best practices for modeling different types of robots.","keywords":"","version":"Next"},{"title":"Deploy URDF","type":0,"sectionRef":"#","url":"/docs/Define-Robot/Deploy-URDF","content":"","keywords":"","version":"Next"},{"title":"Introduction​","type":1,"pageTitle":"Deploy URDF","url":"/docs/Define-Robot/Deploy-URDF#introduction","content":" The following steps will guide you through deploying a URDF file to a ROS2 package.  ","version":"Next","tagName":"h2"},{"title":"Steps​","type":1,"pageTitle":"Deploy URDF","url":"/docs/Define-Robot/Deploy-URDF#steps","content":" Create a ROS2 workspace if you haven't already. You can follow the steps in the Create a ROS2 Workspace tutorial. In the src folder of the workspace unzip the robot description package downloaded from the URDF creator. Build the workspace using the following command:  colcon build   Run the launch file in the robot description package that will launch the robot in Rviz:  ros2 launch &lt;robot_description_package&gt; &lt;launch_file&gt;  ","version":"Next","tagName":"h2"},{"title":"Understanding-linux","type":0,"sectionRef":"#","url":"/docs/Understand-Robot/Understanding-linux","content":"Understanding-linux","keywords":"","version":"Next"},{"title":"Joints","type":0,"sectionRef":"#","url":"/docs/Define-Robot/joints","content":"","keywords":"","version":"Next"},{"title":"Types of Joints​","type":1,"pageTitle":"Joints","url":"/docs/Define-Robot/joints#types-of-joints","content":" There are several types of joints including:  ","version":"Next","tagName":"h2"},{"title":"Fixed​","type":1,"pageTitle":"Joints","url":"/docs/Define-Robot/joints#fixed","content":" A fixed joint is a joint that does not move. It is used to connect two links that are rigidly attached to each other.  ","version":"Next","tagName":"h3"},{"title":"Revolute​","type":1,"pageTitle":"Joints","url":"/docs/Define-Robot/joints#revolute","content":" A revolute joint is a joint that allows rotation around a single axis. It is similar to a hinge joint.  ","version":"Next","tagName":"h3"},{"title":"Prismatic​","type":1,"pageTitle":"Joints","url":"/docs/Define-Robot/joints#prismatic","content":" A prismatic joint is a joint that allows translation along a single axis.  ","version":"Next","tagName":"h3"},{"title":"Continuous​","type":1,"pageTitle":"Joints","url":"/docs/Define-Robot/joints#continuous","content":" A continuous joint is a joint that can rotate indefinitely.  ","version":"Next","tagName":"h3"},{"title":"Planar​","type":1,"pageTitle":"Joints","url":"/docs/Define-Robot/joints#planar","content":" A planar joint is a joint that allows motion in a plane.  ","version":"Next","tagName":"h3"},{"title":"Floating​","type":1,"pageTitle":"Joints","url":"/docs/Define-Robot/joints#floating","content":" A floating joint is a joint that allows motion in 6 degrees of freedom.  Listed below are optional attributes that can be added to the joint element: ","version":"Next","tagName":"h3"},{"title":"Robo Everything Documentation","type":0,"sectionRef":"#","url":"/docs/intro","content":"","keywords":"","version":"Next"},{"title":"Introduction​","type":1,"pageTitle":"Robo Everything Documentation","url":"/docs/intro#introduction","content":" Below are listed each of the phases of the robot development lifecycle along with resources to complete each. Below are recommendations based on designing a robot with ROS2 of resources to help through each phase.  ","version":"Next","tagName":"h2"},{"title":"Fundamentals of Robot Development​","type":1,"pageTitle":"Robo Everything Documentation","url":"/docs/intro#fundamentals-of-robot-development","content":" If you are a beginner to robotic development or need a refresher on foundational concepts in robotics, we recommend starting with the following tutorials:  Understanding a Robot  Success:​  If you consider yourself knowledgeable about linux, command line, configuring a onboard computer (Raspberry Pi, Nvidia Jetson, etc..), basic power distribution, basic electronics communication systems, basics in object oriented python programming and C++, understanding coordinate frames and transformations, and basics of types of sensors and actuators then you have the skills to start building a robot with ROS2.  ","version":"Next","tagName":"h3"},{"title":"Conceptualization​","type":1,"pageTitle":"Robo Everything Documentation","url":"/docs/intro#conceptualization","content":" Conceptualization is the first phase of the robot development lifecycle. During this phase, you will define the purpose of the robot, its capabilities, and the environment in which it will operate. The following resources can help you through the conceptualization phase:  The Engineering Design Matrix  Success:​  If there is a clear purpose outlined for the robot, the required behavior of the robot, the environment in which the robot will operate, and the constraints of the robot then you have successfully completed the conceptualization phase.  tip A clear end objective for the robot is crucial as an all in one robot doesn't exist and distracts from the development of reliable actions a robot can preform consistently.  ","version":"Next","tagName":"h3"},{"title":"CAD Design​","type":1,"pageTitle":"Robo Everything Documentation","url":"/docs/intro#cad-design","content":" The physical design is the actual design of a robot is as important as the software that controls it. These tutorials will not cover the physical design of a robot but below are listed a few resources.  Building a Robot in CAD  Free CAD tools  Fusion 360OnshapeYou can also skip designing your robot in CAD and jump into designing your robot in software using the URDF creator.  Payed CAD tools  SolidWorksAutoCAD  Success:​  If the physical design elements have been prototyped tested for stability and durability having exceeded the required constraints of the robot set. This includes but not limited to stress testing, weight distribution, actuator testing, sensor safety, and power distribution.  ","version":"Next","tagName":"h3"},{"title":"Software Definition​","type":1,"pageTitle":"Robo Everything Documentation","url":"/docs/intro#software-definition","content":" The software definition is outlining the physical robot model in software so the brain of the robot can understand and use what it knows about itself to interact with the world. This includes defining the robot's physical structure, kinematics, joint connections, sensor specifications, and transformations between frames. The following resources can help you through the software definition phase:  Defining a Robot  Success:​  Once you have defined your robot you should be able to visualize your robot in tool such as Rviz and visualize the robot in simulation in Gazebo.  ","version":"Next","tagName":"h3"},{"title":"Development​","type":1,"pageTitle":"Robo Everything Documentation","url":"/docs/intro#development","content":" The development of the code for the robot can be an extensive process depending on the complexity of the robot. This development refers to the ROS2 network of information and computation that will run in order to guide the robots actions.  To be able to develop a robot effectively you should have a good understanding of the following:  ROS2PythonC++  Success: If you have a robot that can preform the tasks you have set out for it then you have successfully developed a robot.  ","version":"Next","tagName":"h3"},{"title":"Robot Simulation​","type":1,"pageTitle":"Robo Everything Documentation","url":"/docs/intro#robot-simulation","content":" For complex robots simulation can assist with the testing and training of robots. There are several simulators available for robotics development including open source and commercially available simulators. The following resources can help you through the robot simulation phase:  Success:​  This phase goes along actively with testing the real robot as the robot is developed. Simulation success is accurately modeling the robot in many scenarios.  ","version":"Next","tagName":"h3"},{"title":"Robot Testing​","type":1,"pageTitle":"Robo Everything Documentation","url":"/docs/intro#robot-testing","content":" Real robot testing is what people typically imagine as a robotic developer but you knew there was a lot of work to get to this point. Real robot testing is crucial as it will bring to light bugs and issues then anything else which is annoying. The following resources can help the process of implementing a robotic system on to a physical robot and testing it.  Success:​  If you have a robot that can preform the tasks you have set out for it then you have successfully developed a robot.  ","version":"Next","tagName":"h3"},{"title":"Deployment​","type":1,"pageTitle":"Robo Everything Documentation","url":"/docs/intro#deployment","content":" Congratulations, if you have a robot that has reliably preformed the tasks you have set out for it then you have successfully developed a robot. Now its time to deploy the robot, building tools for security, monitoring, and maintenance of the robot are parts of the deployment phase.  Success:​  Success in this phase will typically require continued maintenance and updates to the robot as it continues to be more reliable and efficient. If you make it to this step with a project, pat yourself on the back, very few make it to this step. ","version":"Next","tagName":"h3"},{"title":"Quick Start - Building a ROS2 Robot","type":0,"sectionRef":"#","url":"/docs/quick-start","content":"","keywords":"","version":"Next"},{"title":"Introduction​","type":1,"pageTitle":"Quick Start - Building a ROS2 Robot","url":"/docs/quick-start#introduction","content":" Welcome to the Quick Start Guide for URDF Creator!  We advise that all users of URDF Creator, both students and experienced robot developers, to go through this quick start guide before looking at the detailed documentation.  The URDF Creator is a powerful tool tailored for ROS2 users, facilitating the creation of robot models within the ROS ecosystem. The URDF (Unified Robot Description Format) defines the geometry, kinematics, joint connections, sensor specifications, as well as transformations between frames provided by the robot state publisher.  ","version":"Next","tagName":"h2"},{"title":"Understanding URDF​","type":1,"pageTitle":"Quick Start - Building a ROS2 Robot","url":"/docs/quick-start#understanding-urdf","content":" ","version":"Next","tagName":"h2"},{"title":"What is a URDF?​","type":1,"pageTitle":"Quick Start - Building a ROS2 Robot","url":"/docs/quick-start#what-is-a-urdf","content":" URDF (Uniform Robot Description Format) serves as a standardized XML-based format for describing robots in ROS. It encompasses various elements such as links, joints, sensors, and visuals, all crucial for accurately representing a robot's physical structure and kinematics.  ","version":"Next","tagName":"h3"},{"title":"Links and Joints​","type":1,"pageTitle":"Quick Start - Building a ROS2 Robot","url":"/docs/quick-start#links-and-joints","content":" Links represent physical components of the robot, such as wheels, arms, or sensors. Joints define the connections between these links, enabling movement and articulation.  ","version":"Next","tagName":"h3"},{"title":"Modeling Shapes in URDF​","type":1,"pageTitle":"Quick Start - Building a ROS2 Robot","url":"/docs/quick-start#modeling-shapes-in-urdf","content":" URDF models consist of three basic shapes: cubes, cylinders, and spheres. These shapes are used for their simplicity and computational efficiency.  ","version":"Next","tagName":"h3"},{"title":"What is ROS2?​","type":1,"pageTitle":"Quick Start - Building a ROS2 Robot","url":"/docs/quick-start#what-is-ros2","content":" ","version":"Next","tagName":"h2"},{"title":"Overview of ROS2​","type":1,"pageTitle":"Quick Start - Building a ROS2 Robot","url":"/docs/quick-start#overview-of-ros2","content":"   ROS2 (Robot Operating System 2) is an open-source framework that provides libraries and tools to help software developers create robot applications. It is widely used by researchers, hobbyists, and industrial developers to build and simulate robots.  Learn more about ROS2 here.  ","version":"Next","tagName":"h3"},{"title":"Building a Basic Bot with the URDF Creator​","type":1,"pageTitle":"Quick Start - Building a ROS2 Robot","url":"/docs/quick-start#building-a-basic-bot-with-the-urdf-creator","content":" ","version":"Next","tagName":"h2"},{"title":"The User Interface​","type":1,"pageTitle":"Quick Start - Building a ROS2 Robot","url":"/docs/quick-start#the-user-interface","content":" Before we start building our robot, let's familiarize ourselves with the URDF Creator's user interface.    Some of the key features of the URDF Creator include:  Menu (Top Left): Access to the export URDF option as well as future development into project management.Project Name (Top Left): Name of the robot, will be used as the name of exported packages. Default: robotTools (Top Middle): Tools for moving, rotating, and resizing links.Object Tree (Left): Displays the hierarchy of links in the robot model. Joint information is carried inside each link but the base_link defining its relationship to its parent.Add Objects (Bottom Left): Buttons to add shapes to the scene.View (Center): Main view which can be viewed from different angles, and links can be selected and manipulated.Object Parameters (Top Right): Once a link is selected, information about the selected link. The following parameters can be altered: Link Name: Name of the link also used as the frame_id in the URDF.Color: Color of the link.Weight: Weight of the link.Joints: Joints that are connected to the link.Position: Position of the link.Rotation: Rotation of the link.Scale: Scale of the link.Sensor: Sensor information of the link. Used by ROS2 for its frame ID but parameters in simulation give accurate representation of the actual sensor. URDF Code (Bottom Right): Displays the URDF code generated in real-time as you manipulate the shapes and set their attributes.  ","version":"Next","tagName":"h3"},{"title":"Adding Shapes to the Scene​","type":1,"pageTitle":"Quick Start - Building a ROS2 Robot","url":"/docs/quick-start#adding-shapes-to-the-scene","content":" Each part of a robot that moves independently is represented as a link in URDF. Links are connected by joints, which define how the links can move relative to each other.  Locate the add buttons in the bottom left corner of the screen.Click the desired shape (cube, cylinder, or sphere) to add it to the scene.  In this example, we will add a cube for the base of our robot. Note that the origin of the grid is used by the center of the robot with ROS2. For a Differential Drive robot, the center of the robot is the center of the back wheels on the ground.    ","version":"Next","tagName":"h3"},{"title":"Manipulating Shapes​","type":1,"pageTitle":"Quick Start - Building a ROS2 Robot","url":"/docs/quick-start#manipulating-shapes","content":" Manipulate the cube by first selecting it either by selecting it or clicking on it in the Object Tree.    Move the cube accordingly to the shape of the base of the robot off the ground as high as the wheels will be.    To give specific scaling, positioning, or rotation of a link, use the parameters in the Object Parameters section.    ","version":"Next","tagName":"h3"},{"title":"Adding Wheels​","type":1,"pageTitle":"Quick Start - Building a ROS2 Robot","url":"/docs/quick-start#adding-wheels","content":" Next, we will add the wheels to the robot by inserting a cylinder. First by scaling, then position the cylinder in place.    Also, in the parameters is the ability to change the name of the link. The name of the link will be used by ROS2 as the frame_id. We will change the wheel name to be a unique name.    We can use the duplicate function by right-clicking on the link in the Object Tree and selecting duplicate. This is also a way to delete links.    After positioning the wheels, we should get something like this:    ","version":"Next","tagName":"h3"},{"title":"Adding a Camera Sensor​","type":1,"pageTitle":"Quick Start - Building a ROS2 Robot","url":"/docs/quick-start#adding-a-camera-sensor","content":" Next, we will add a camera sensor to the robot. This will be the position of the camera on the robot and will define the transformation between the robot and where its camera is for other nodes to use, such as orb_slam2. Mark this link as a camera sensor in the parameters and name it camera_link. The sensor details will be primarily used by Gazebo for simulation.    ","version":"Next","tagName":"h3"},{"title":"Adding Joints​","type":1,"pageTitle":"Quick Start - Building a ROS2 Robot","url":"/docs/quick-start#adding-joints","content":" Finally, we will add the joints which define the relationship between the child and parent link. To define the joint, select the child link and in Object Parameters select the type of joint it is.    After adding the joints, we should have a robot that looks like this:    The robot is now ready to be exported as a URDF file and used in ROS2.  ","version":"Next","tagName":"h3"},{"title":"Exporting the URDF and Robot Description Package​","type":1,"pageTitle":"Quick Start - Building a ROS2 Robot","url":"/docs/quick-start#exporting-the-urdf-and-robot-description-package","content":" ","version":"Next","tagName":"h2"},{"title":"Exporting Process​","type":1,"pageTitle":"Quick Start - Building a ROS2 Robot","url":"/docs/quick-start#exporting-process","content":" Export Menu: Click the menu button in the top left corner of the screen.    Exporting: Select &quot;Export URDF&quot; to generate and download your URDF file.    The exported URDF file serves as the blueprint for your robot's virtual representation within ROS, enabling simulation, visualization, and control.  The exported zip folder should be the name of your robot with _description at the end.    Unzip the folder and place it in your ROS2 workspace in the src folder.  For more information on how to use the URDF in ROS2, please visit the ROS2 documentation:  ROS2 URDF Documentation  ","version":"Next","tagName":"h3"},{"title":"Package Contents​","type":1,"pageTitle":"Quick Start - Building a ROS2 Robot","url":"/docs/quick-start#package-contents","content":" Looking at the contents of the ROS2 packages, what is included is as follows:    launch: Contains the launch files for the robot.URDF: Contains the URDF file for the robot.SDF: Contains the SDF file for the robot. This is used in Gazebo Simulation.  To launch the robot description and see it in RViz, use the following command:  ros2 launch &lt;name&gt;_description display.launch.py   This will launch the robot in RViz, and you should see the robot in the center of the screen.  ","version":"Next","tagName":"h3"},{"title":"Next Steps​","type":1,"pageTitle":"Quick Start - Building a ROS2 Robot","url":"/docs/quick-start#next-steps","content":" ","version":"Next","tagName":"h2"},{"title":"Further Guides​","type":1,"pageTitle":"Quick Start - Building a ROS2 Robot","url":"/docs/quick-start#further-guides","content":" Explore ROS2 control and other advanced features.ROS2 ControlVisit the GitHub repository to report issues and contribute to the project.Fill out our bug survey to help us improve the tool.  We extend our gratitude to the ROS2 community for their invaluable contributions to robotics and open-source software. Let's embark on the journey of designing and deploying ROS2 robots with the URDF Creator!  To support this effort, please consider helping to add to these tutorials and documentation with examples and best practices for making the developer experience better. ","version":"Next","tagName":"h3"}],"options":{"id":"default"}}